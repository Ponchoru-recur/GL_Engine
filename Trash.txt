#include "config.hpp"

// Vertex source code
const char *vertexShaderSource =
    "#version 460 core\n"
    "layout (location = 0) in vec3 aPos;\n"
    "void main()\n"
    "{\n"
    "   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n"
    "}\0";
// Fragment source code
const char *fragmentShaderSource =
    "#version 460 core\n"
    "out vec4 FragColor;\n"
    "void main()\n"
    "{\n"
    "   FragColor = vec4(0.8f, 0.3f, 0.02f, 1.0f);\n"
    "}\n\0";

int main(void) {
  // Variable width and height for easy change.
  int width = 800;
  int height = 800;
  // Initializing OpenGL
  glfwInit();
  // Specifying which OpenGl version I'm using
  glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
  glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 6);
  glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

  GLfloat vertices[] = {-0.5f, -0.5f * float(sqrt(3)) / 3,    0.0f,
                        0.5f,  -0.5f * float(sqrt(3)) / 3,    0.0f,
                        0.0f,  0.5f * float(sqrt(3)) * 2 / 3, 0.0f};

  // Creating a Window
  GLFWwindow *window = glfwCreateWindow(width, height, "Banana", NULL, NULL);
  // Checking if the window was successfully created
  if (window == NULL) {
    std::cout << "Failed to create GLFW Window\n" << std::endl;
  }
  // Telling OpenGl to use this window
  glfwMakeContextCurrent(window);

  // Load glad so you can write stuff on the screen
  gladLoadGL();

  // Specifying where the things should be rendered on the screen
  // The viewport goes from x = 0, y = 0, to x = 800, y = 800.
  glViewport(0, 0, width, height);

  // Create Vetex Shader Object and get reference
  GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);
  // Attach Vertex Shader source to the Vertex Shader Object
  glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
  // Compile the Vertex Shader into Machine code
  glCompileShader(vertexShader);

  // Create Fragment Shader Object and get reference
  GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
  // Attach Fragment Shader source to the Fragment Shader Object
  glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
  // Compile the Fragment Shader into Machine code
  glCompileShader(fragmentShader);

  // Create a Shader Program Object and get it's reference
  GLuint shaderProgram = glCreateProgram();

  // Attach Vertex Shader into Shader Program
  glAttachShader(shaderProgram, vertexShader);
  // Attach Fragment Shader into Shader Program
  glAttachShader(shaderProgram, fragmentShader);

  // Wrap up/Link all shaders together into the ShaderProgram
  glLinkProgram(shaderProgram);

  // Delete unusable Shader objects
  glDeleteShader(vertexShader);
  glDeleteShader(fragmentShader);

  // Create reference containers for the Vertex Array Object and the Vertex
  // Buffer Object
  GLuint VAO, VBO;

  // Generate the VAO and VBO with only 1 object each
  glGenVertexArrays(1, &VAO);
  glGenBuffers(1, &VBO);

  // Make the VAO the current Vertex Array Object by binding it
  glBindVertexArray(VAO);

  // Bind the VBO specifying it's a GL_ARRAY_BUFFER
  glBindBuffer(GL_ARRAY_BUFFER, VBO);

  // Introduce the vertices into the VBO
  glBindBuffer(GL_ARRAY_BUFFER, VBO);
  glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

  glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void *)0);
  glEnableVertexAttribArray(0);

  glBindBuffer(GL_ARRAY_BUFFER, 0);
  glBindVertexArray(0);

  // Making the color

  glfwSwapBuffers(window);

  // Loop function so the program doesn't end
  while (!glfwWindowShouldClose(window)) {

    glClearColor(0.27f, 0.25f, 0.17f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT);
    glUseProgram(shaderProgram);
    glBindVertexArray(VAO);
    glDrawArrays(GL_TRIANGLES, 0, 3);
    glfwSwapBuffers(window);

    glfwPollEvents();
  }

  glDeleteVertexArrays(1, &VAO);
  glDeleteBuffers(1, &VBO);
  glDeleteProgram(shaderProgram);

  // Cleaning the window and terminating OpenGL once while loop ends.
  glfwDestroyWindow(window);
  glfwTerminate();
  return 0;
}










////////////////////////////////////////////////////////////////////////////







#include "config.hpp"
// #include "shaders.hpp"

const char* vertexShaderSource = "#version 460 core\n"
    "layout (location = 0) in vec3 aPos;\n"
    "void main(){\n"
    "gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0f);\n"
    "}\0";

const char* fragmentShaderSource = "#version 460 core\n"
    "out vec4 FragColor;\n"
    "\n"
    "void main(){\n"
    "FragColor = vec4(0.8f, 0.5f, 0.2f, 1.0f);\n"
    "}\0";

//An input Key that checks whether the ESCAPE key is pressed down.
void ProcessInput(GLFWwindow* window){
if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS){
    glfwSetWindowShouldClose(window, true);
    }
}

int main(){

    int width = 800;
    int height = 600;

    //Initializes the GLFW library
    glfwInit();
    //GLFW doesn't know what version we're using thus we write the specification needed, and for this I am using 4.6
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 6);
    //This clarifies which OpengGL we'll be using (I will be using GLFW_OPENGLE_CORE_PROFILE because the other is too hard to learn which is called Immediate mode)
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    //This is the window where everything else will be rendered
    GLFWwindow * window = glfwCreateWindow(width, height, "Learning the hard way", NULL, NULL);

    //Checking whether the making of window was successful
    if (window == NULL){
        std::cout << "WINDOW Failed to Initialized\n";
        glfwTerminate();
        return -1;
    }

    //Use the window as the current window because you need to be specific on which window you're using (which is weird)
    glfwMakeContextCurrent(window);

    //Checks and loads GLAD which is a library that basically finds the pointers for OpenGL since it is OS specific meaning each operating system has different pointer location etc
    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)){
        std::cout << "GLAD Failed to Initialized.\n";
        glfwTerminate();
        return -1;
    }
    //This sets WHERE the area is allowed to get rendered
    glViewport(0, 0, width, height);

    //Making vertice data to be used later and create a triangle with it
    GLfloat vertices[] = {
        -0.5f, -0.5f, 0.0f,
         0.5f, -0.5f, 0.0f,
         0.0f,  0.5f, 0.0f,
    };


    int success;
    char infoLog[521];

    //Turn the vertexShader into machine code for the GPU to use
    GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
    glCompileShader(vertexShader);

    //Making a blank shader fragment
    GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
    //Printing or writing the fragmentShaderSource code inisde fragmentShader
    glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
    //Translating the shader for the GPU to understand
    glCompileShader(fragmentShader);

    //This gets the status if vertexshader compiled properly
    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);
    if (!success){
        glGetShaderInfoLog(vertexShader, 521, NULL, infoLog);
        std::cout << "ERROR::SHADER::VERTEX::COMPILATIOM_FAILED" << infoLog << std::endl;
        glDeleteShader(vertexShader);
        return -1;
    } else { std::cout << "VERTEX SHADER SUCCESSFULLY COMPILED WITH NO ERRORS" << std::endl; }

    //This gets the status if fragmentshader compiled properly
    glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);
    if (!success){
        glGetShaderInfoLog(fragmentShader, 521, NULL, infoLog);
        std::cout << "ERROR::SHADER::FRAGMENT::COMPILATION_FAILED" << infoLog << std::endl;
        glDeleteShader(fragmentShader);
        return -1;
    } else { std::cout << "FRAGMENT SHADER SUCCESSFULLY COMPILED WITH NO ERRORS" << std::endl; }

    //Making a shader program
    GLuint shaderProgram = glCreateProgram();
    //attaching vertex and fragment shaders to shaderProgram
    glAttachShader(shaderProgram, vertexShader);
    glAttachShader(shaderProgram, fragmentShader);

    //Finally linking all attached shaders
    glLinkProgram(shaderProgram);

    //This checks if the program linked properly;
    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);
    if (!success){
        glGetProgramInfoLog(shaderProgram, 521, NULL, infoLog);
        std::cout << "ERROR::PROGRAM::SHADER::LINKING_FAILED" << infoLog << std::endl;
    } else { std::cout << "SHADER PROGRAM SUCCESSFULLY LINKED WITH NO ERRORS" << std::endl; }

    //Deleting as it has no more purpose
    glDeleteShader(vertexShader);
    glDeleteShader(fragmentShader);

    //VAO stores how to interpret vertex data (configuration) (VAO - Vertex Array Object)
    //VBO stores the actual data (vertices) (VBO - Vertex Buffer Object)
    GLuint VAO, VBO;
    //Generate Vertex and then assign an ID
    glGenVertexArrays(1, &VAO);
    //Generating a buffer and then assign an ID
    glGenBuffers(1, &VBO);
    //Activates the VAO. All subsequent vertex-related operations (e.g., VBO bindings, attribute setups) will be stored in this VAO.
    glBindVertexArray(VAO);
    //Binds the VBO to the GL_ARRAY_BUFFER target, making it the active buffer for vertex data.
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    //I have no fucking idea
    //Copies the vertices array from CPU memory to the GPUâ€™s VBO.
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

    //No fucking idea
    //Tells OpenGL how to interpret the raw data in the VBO.
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    //Enables the vertex attribute at location 0. The shader can now access this data.
    glEnableVertexAttribArray(0);

    //Unbinds the VBO and VAO to avoid accidental modifications.
    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glBindVertexArray(0);


    //This will keep the program open until the user press the close button then the while loop stops causing the program to close.
    while (!glfwWindowShouldClose(window)){
        //Check if there is Input
        ProcessInput(window);

        //State-setter, glClearColor sets the state of glClear
        glClearColor(0.2f,0.4f,0.6f,1.0f);
        //State-user, glClear uses the state it glClearColor that was set to
        glClear(GL_COLOR_BUFFER_BIT);

        glUseProgram(shaderProgram);
        glBindVertexArray(VAO);
        glDrawArrays(GL_TRIANGLES, 0, 3);

        //This swaps the buffers in the window.
        glfwSwapBuffers(window);

        //This checks the events like your keyboard or mouse, etc
        glfwPollEvents();
    }

    //Destroys and Clean remnants that were allocated before
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
    glDeleteProgram(shaderProgram);
    glfwDestroyWindow(window);
    glfwTerminate();
    return 0;
}


//The goal is making the fragment shader (The function that shades the pixels) work is by adding
//floats inside the first below the position floats and letting glVertexattribPointer describe the 3 floats
//and with that i have to change vertexShader and put a in (layout = 1) vec3 vertexColor and then out vec


















#include <iostream>
#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <fstream>
#include <sstream>

int width = 800, height = 600;

const float X_DELTA = 0.1f;
unsigned int numTris = 0;
const unsigned int NUM_VERTICES_PER_TRI = 3;
const unsigned int NUM_FLOATS_PER_VERTICE = 6;
const unsigned int TRIANGLE_BYTE_SIZE = NUM_VERTICES_PER_TRI * NUM_FLOATS_PER_VERTICE * sizeof(float);
const unsigned int MAX_TRIS = 20;

// Vertex Shader Source
const char* vertexShaderSource = "#version 460 core\n"
    "in layout (location = 0) vec3 aPos;\n"
    "in layout (location = 1) vec3 vertexColor;\n"
    ""
    "out vec3 theColor;\n"
    ""
    "void main() {\n"
    "   gl_Position = vec4(aPos, 1.0);\n"
    "   theColor = vertexColor;\n"
    "}\0";

// Fragment Shader Source
//Runs many more times compared to vertexShader
const char* fragmentShaderSource = "#version 460 core\n"
    "out vec4 FragColor;\n"
    ""
    "in vec3 theColor;\n"
    ""
    "void main() {\n"
    "    FragColor = vec4(theColor, 1.0f);\n"
    "}\0";


// Input Handling
void ProcessInput(GLFWwindow* window) {
    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS) {
        glfwSetWindowShouldClose(window, true);
    }
}

void sendDataOpenGL(){
    if (numTris == MAX_TRIS){ return; }
    const GLfloat THIS_TRI_x = -1 + numTris * X_DELTA;
    GLfloat thisTri[] = {
        THIS_TRI_x, 0.0f, 0.0f,
        1.0f, 0.0f, 0.0f,

        THIS_TRI_x + X_DELTA, 0.0f, 0.0f,
        1.0f, 0.0f, 0.0f,

        THIS_TRI_x, 0.0f, 0.0f,
        1.0f, 0.0f, 0.0f
    };

    glBufferSubData(GL_ARRAY_BUFFER, numTris * TRIANGLE_BYTE_SIZE, TRIANGLE_BYTE_SIZE, thisTri);
    numTris++;
}

int main() {


    // Initialize GLFW
    glfwInit();
    //GLFW doesn't know what version we're using thus we write the specification needed, and for this I am using 4.6
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 6);
    //This clarifies which OpengGL we'll be using (I will be using GLFW_OPENGLE_CORE_PROFILE because the other is too hard to learn which is called Immediate mode)
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    //This is the window where everything else will be placed
    GLFWwindow* window = glfwCreateWindow(width, height, "Triangle", NULL, NULL);
    //Checking whether the making of window was successful
    if (!window) {
        std::cout << "WINDOW Failed to Initialize\n";
        glfwTerminate();
        return -1;
    }
    //Use the window as the current window because you need to be specific on which window you're using (which is weird)
    glfwMakeContextCurrent(window);
    //caps the frames to 144 (because my laptop runs on 144hz)
    // glfwSwapInterval(1);

    //Checks and loads GLAD which is a library that basically finds the pointers for OpenGL since it is OS specific meaning each operating system has different pointer location etc
    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) {
        std::cout << "GLAD Failed to Initialize\n";
        glfwTerminate();
        return -1;
    }
    //This sets WHERE the area is allowed to get rendered
    glViewport(0, 0, width, height);
    glEnable(GL_DEPTH_TEST);

    // Compile Vertex Shader
    GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
    glCompileShader(vertexShader);

    //Basically says get shader info and check if there's a problem
    int success;
    char infoLog[512];
    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);
    if (!success) {
        glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);
        std::cout << "Vertex Shader Compilation Failed:\n" << infoLog << "\n";
    }

    // Compile Fragment Shader
    GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
    glCompileShader(fragmentShader);

    // Check for errors
    glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);
    if (!success) {
        glGetShaderInfoLog(fragmentShader, 512, NULL, infoLog);
        std::cout << "Fragment Shader Compilation Failed:\n" << infoLog << "\n";
    }

    // Link Shaders into a Program
    GLuint shaderProgram = glCreateProgram();
    glAttachShader(shaderProgram, vertexShader);
    glAttachShader(shaderProgram, fragmentShader);
    glLinkProgram(shaderProgram);

    // Check for linking errors
    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);
    if (!success) {
        glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);
        std::cout << "Shader Program Linking Failed:\n" << infoLog << "\n";
    }

    // Delete Shaders after linking
    glDeleteShader(vertexShader);
    glDeleteShader(fragmentShader);

    //This is my graphics data
    //The first two floats represent the positions and the next 3 floats represent the color
    const float red_depth = +0.5f;
    const float blue_depth = -0.4f;
    // GLfloat verts[] = {
    //     +0.0f, +1.0f, -1.0f, //0
    //     +1.0f, +0.0f, +0.0f,
    //     +1.0f, -1.0f, red_depth, //1
    //     +1.0f, +0.0f, +0.0f,
    //     -1.0f, -1.0f, red_depth, //2
    //     +1.0f, +0.0f, +0.0f,


    //     +0.0f, -0.5f, blue_depth, //3
    //     +0.0f, +0.0f, +1.0f,
    //     +1.0f, +1.0f, blue_depth, //4
    //     +0.0f, +0.0f, +1.0f,
    //     -1.0f, +1.0f, blue_depth, //5
    //     +0.0f, +0.0f, +1.0f,
    // };

    // Create VAO (Important!)
    //This stores how to interpret the vertices else it forgets and probably will show a weird behavior.
    GLuint VAO;
    glGenVertexArrays(1, &VAO);
    glBindVertexArray(VAO);

    // Create VBO (Vertex Buffer Object)
    GLuint VertexBufferID;
    glGenBuffers(1, &VertexBufferID);
    glBindBuffer(GL_ARRAY_BUFFER, VertexBufferID);
    //This stores the acry
    glBufferData(GL_ARRAY_BUFFER, MAX_TRIS * TRIANGLE_BYTE_SIZE, NULL, GL_STATIC_DRAW);
     //The purpose for this piecetual data to the GPU memo of code is to efficiently delete the unnecessary duplication by using the vertices in the GL_ARRAY_BUFFER
    GLushort indices[] = {0,1,2, 3,4,5};
    GLuint indexBufferID;
    glGenBuffers(1, &indexBufferID);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, indexBufferID);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);

    // Describe Vertex Data
    //The 0 describes the starting point of the verts. (location of the verts.)
    //The 2 describes the number of components (x,y)
    //What datatype is the component (GL_FLOAT)
    //The GL_FALSE means don't tamper with the fucking spell
    //The 2 * sizeof(float) is i have no fucking idea either
    //(void*)0?????
    //glEnableVertexAttribArray(0); enables OpenGL to send the data to the RAM and the GRAPHICS CARD to send it to the graphics processing pipeline
    //For attribute (zero) expect (two) (GL_FLOAT)
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), 0);
    glEnableVertexAttribArray(0);

    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (char*)(sizeof(float) * 3));
    glEnableVertexAttribArray(1);

    // Unbind Buffers
    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glBindVertexArray(0);

    sendDataOpenGL();

    //Main Render Loop
    while (!glfwWindowShouldClose(window)) {

        ProcessInput(window);

        //Clear Screen
        glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);


        //Render Triangle
        glUseProgram(shaderProgram);
        glBindVertexArray(VAO);
        glDrawArrays(GL_TRIANGLES, 0, numTris * NUM_VERTICES_PER_TRI);
        // glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_SHORT, 0);


        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    // **Cleanup**
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VertexBufferID);
    glDeleteProgram(shaderProgram);

    glfwDestroyWindow(window);
    glfwTerminate();
    return 0;
}


//Remember


#include <iostream>
#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <vector>

int width = 800, height = 600;

// Vertex Shader Source
const char* vertexShaderSource = "#version 460 core\n"
    "in layout (location = 0) vec3 aPos;\n"
    "in layout (location = 1) vec3 vertexColor;\n"
    ""
    "out vec3 theColor;\n"
    ""
    "void main() {\n"
    "   gl_Position = vec4(aPos, 1.0);\n"
    "   theColor = vertexColor;\n"
    "}\0";

// Fragment Shader Source
//Runs many more times compared to vertexShader
const char* fragmentShaderSource = "#version 460 core\n"
    "out vec4 FragColor;\n"
    ""
    "in vec3 theColor;\n"
    ""
    "void main() {\n"
    "    FragColor = vec4(theColor, 1.0f);\n"
    "}\0";



const float X_DELTA = 0.2f;
unsigned int numTris = 0;
const unsigned int NUM_VERTICES_PER_TRI = 3;
const unsigned int NUM_FLOATS_PER_VERTICE = 6;
const unsigned int TRIANGLE_BYTE_SIZE = NUM_VERTICES_PER_TRI * NUM_FLOATS_PER_VERTICE * sizeof(float);
const unsigned int MAX_TRIS = 10;

void send_Triangle_OpenGL(){
    if (numTris == MAX_TRIS){
        return;
    }
    const GLfloat THIS_TRI_X = -1 + numTris * X_DELTA;

    GLfloat thisTri[] = {
        THIS_TRI_X, 1.0f, 0.0f,
        1.0f, 0.0f, 0.0f,

        THIS_TRI_X + X_DELTA, 1.0f, 0.0f,
        1.0f, 0.0f, 0.0f,

        THIS_TRI_X, 0.0f, 0.0f,
        1.0f, 0.0f, 0.0f,


    };
    // glBindBuffer(GL_ARRAY_BUFFER, VertexBufferID); // Bind the VBO
    glBufferSubData(GL_ARRAY_BUFFER, numTris * TRIANGLE_BYTE_SIZE, TRIANGLE_BYTE_SIZE, thisTri);
    // glBindBuffer(GL_ARRAY_BUFFER, 0); // Unbind after update
    numTris++;
    printf("Working properly\n");
}


// Input Handling
void ProcessInput(GLFWwindow* window) {
    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS) {
        glfwSetWindowShouldClose(window, true);
    }
    if (glfwGetKey(window, GLFW_KEY_E) == GLFW_PRESS) {
        send_Triangle_OpenGL();
        printf("Pressed\n");
    }
}

int main() {


    // Initialize GLFW
    glfwInit();
    //GLFW doesn't know what version we're using thus we write the specification needed, and for this I am using 4.6
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 6);
    //This clarifies which OpengGL we'll be using (I will be using GLFW_OPENGLE_CORE_PROFILE because the other is too hard to learn which is called Immediate mode)
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    //This is the window where everything else will be placed
    GLFWwindow* window = glfwCreateWindow(width, height, "Triangle", NULL, NULL);
    //Checking whether the making of window was successful
    if (!window) {
        std::cout << "WINDOW Failed to Initialize\n";
        glfwTerminate();
        return -1;
    }
    //Use the window as the current window because you need to be specific on which window you're using (which is weird)
    glfwMakeContextCurrent(window);
    //caps the frames to 144 (because my laptop runs on 144hz)
    // glfwSwapInterval(1);

    //Checks and loads GLAD which is a library that basically finds the pointers for OpenGL since it is OS specific meaning each operating system has different pointer location etc
    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) {
        std::cout << "GLAD Failed to Initialize\n";
        glfwTerminate();
        return -1;
    }
    //This sets WHERE the area is allowed to get rendered
    glViewport(0, 0, width, height);
    glEnable(GL_DEPTH_TEST);

    // Compile Vertex Shader
    GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
    glCompileShader(vertexShader);

    //Basically says get shader info and check if there's a problem
    int success;
    char infoLog[512];
    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);
    if (!success) {
        glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);
        std::cout << "Vertex Shader Compilation Failed:\n" << infoLog << "\n";
    }

    // Compile Fragment Shader
    GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
    glCompileShader(fragmentShader);

    // Check for errors
    glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);
    if (!success) {
        glGetShaderInfoLog(fragmentShader, 512, NULL, infoLog);
        std::cout << "Fragment Shader Compilation Failed:\n" << infoLog << "\n";
    }

    // Link Shaders into a Program
    GLuint shaderProgram = glCreateProgram();
    glAttachShader(shaderProgram, vertexShader);
    glAttachShader(shaderProgram, fragmentShader);
    glLinkProgram(shaderProgram);

    // Check for linking errors
    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);
    if (!success) {
        glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);
        std::cout << "Shader Program Linking Failed:\n" << infoLog << "\n";
    }

    // Delete Shaders after linking
    glDeleteShader(vertexShader);
    glDeleteShader(fragmentShader);

    //This is my graphics data
    //The first two floats represent the positions and the next 3 floats represent the color

    // GLfloat verts[] = {
    //     +0.0f, +1.0f, +0.0f, //0
    //     +1.0f, +0.0f, +0.0f,

    //     +1.0f, -1.0f, +0.0f, //1
    //     +1.0f, +0.0f, +0.0f,

    //     -1.0f, -1.0f, +0.0f, //2
    //     +1.0f, +0.0f, +0.0f,



    //     +0.0f, -0.5f, +0.0f, //3
    //     +0.0f, +0.0f, +1.0f,

    //     +1.0f, +1.0f, +0.0f, //4
    //     +0.0f, +0.0f, +1.0f,

    //     -1.0f, +1.0f, +0.0f, //5
    //     +0.0f, +0.0f, +1.0f,
    // };

    // std::vector<GLfloat> verts = {
    //     +0.0f, +0.0f, +0.0f, //0
    //     +1.0f, +0.0f, +0.0f,

    //     +0.0f, -0.5f, +0.0f, //1
    //     +1.0f, +0.0f, +0.0f,

    //     +0.5f, -0.5f, +0.0f, //2
    //     +1.0f, +0.0f, +0.0f,


    //     +0.0f, +0.0f, +0.0f, //3
    //     +0.0f, +0.0f, +1.0f,

    //     +0.5f, +0.0f, +0.0f, //4
    //     +0.0f, +0.0f, +1.0f,

    //     +0.5f, -0.5f, +0.0f, //5
    //     +0.0f, +0.0f, +1.0f,
    // };

    // Create VAO (Important!)
    //This stores how to interpret the vertices else it forgets and probably will show a weird behavior.
    GLuint VAO;
    glGenVertexArrays(1, &VAO);
    glBindVertexArray(VAO);

    // Create VBO (Vertex Buffer Object)
    GLuint VertexBufferID;
    glGenBuffers(1, &VertexBufferID);
    glBindBuffer(GL_ARRAY_BUFFER, VertexBufferID);
    //This stores the acry
    glBufferData(GL_ARRAY_BUFFER, MAX_TRIS * TRIANGLE_BYTE_SIZE, NULL, GL_STATIC_DRAW);
     //The purpose for this piecetual data to the GPU memo of code is to efficiently delete the unnecessary duplication by using the vertices in the GL_ARRAY_BUFFER
    // GLushort indices[] = {0,1,2, 3,4,5};
    // GLuint indexBufferID;
    // glGenBuffers(1, &indexBufferID);
    // glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, indexBufferID);
    // glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);

    // Describe Vertex Data
    //The 0 describes the starting point of the verts. (location of the verts.)
    //The 2 describes the number of components (x,y)
    //What datatype is the component (GL_FLOAT)
    //The GL_FALSE means don't tamper with the fucking spell
    //The 2 * sizeof(float) is i have no fucking idea either
    //(void*)0?????
    //glEnableVertexAttribArray(0); enables OpenGL to send the data to the RAM and the GRAPHICS CARD to send it to the graphics processing pipeline
    //For attribute (zero) expect (two) (GL_FLOAT)
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), 0);
    glEnableVertexAttribArray(0);

    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (char*)(sizeof(float) * 3));
    glEnableVertexAttribArray(1);

    // send_Triangle_OpenGL();

    // Unbind Buffers
    // glBindBuffer(GL_ARRAY_BUFFER, 0);
    glBindVertexArray(0);
    //Main Render Loop

    while (!glfwWindowShouldClose(window)) {

        ProcessInput(window);

        //Clears the color and depth
        glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        //Render Triangle
        glUseProgram(shaderProgram);
        glBindVertexArray(VAO);
        // glDrawArrays(GL_TRIANGLES, (numTris - 1) * NUM_VERTICES_PER_TRI, numTris * NUM_VERTICES_PER_TRI);
        glDrawArrays(GL_TRIANGLES, 0, numTris * NUM_VERTICES_PER_TRI);

        // glDrawElements(GL_TRIANGLES, 6, GL_FLOAT, 0);
        // glDrawArrays(GL_TRIANGLES, 0, verts.size());


        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    // **Cleanup**
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VertexBufferID);
    glDeleteProgram(shaderProgram);

    glfwDestroyWindow(window);
    glfwTerminate();
    return 0;
}


//Remember
glm::vec3(-0.5f, +0.5f, +0.0f), //0
      glm::vec3(+1.0f, +0.0f, +0.0f),

      glm::vec3(-0.5f, -0.5f, +0.0f), //1
      glm::vec3(+0.0f, +1.0f, +0.0f),

      glm::vec3(+0.5f, -0.5f, +0.0f), //2
      glm::vec3(+0.0f, +0.0f, +1.0f),

      glm::vec3(+0.5f, +0.5f, +0.0f), //3
      glm::vec3(+0.0f, +0.0f, +1.0f),
